rm(result.CFA)
matrix.CFA <- lavaan::lavInspect(CFA,"standardized")
CFA.loading <- as.data.frame(matrix.CFA$lambda) %>%
dplyr::select(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC) %>%
dplyr::mutate_at(vars(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC), round, 3)
CFA.loading[CFA.loading == 0] <- NA
CFA.correlation <- as.data.frame(matrix.CFA$psi) %>%
dplyr::mutate_at(vars(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC), round, 3) %>%
.[c("ASC", "OSC","SCO", "RD", "POS", "LS", "UI", "UC", "DI", "DC"), c("ASC", "OSC","SCO", "RD", "POS", "LS", "UI", "UC", "DI", "DC")]
write.csv(CFA.loading, "./OUTPUT/CFA/loading.csv")
write.csv(CFA.correlation, "./OUTPUT/CFA/latent_correlation.csv")
View(CFA.loading)
result.CFA <- capture.output({
CFA <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
SCO =~ ASC + OSC
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
UI =~ UI1 + UI2 + UI3
UC =~ UC1 + UC2 + UC3
DI =~ DI1 + DI2 + DI3
DC =~ DC1 + DC2 + DC3' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(CFA, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.CFA, "./OUTPUT/CFA/CFA.md")
rm(result.CFA)
matrix.CFA <- lavaan::lavInspect(CFA,"standardized")
CFA.loading <- as.data.frame(matrix.CFA$lambda) %>%
dplyr::select(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC) %>%
dplyr::mutate_at(vars(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC), round, 3)
CFA.loading[CFA.loading == 0] <- NA
CFA.correlation <- as.data.frame(matrix.CFA$psi) %>%
dplyr::mutate_at(vars(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC), round, 3) %>%
.[c("ASC", "OSC","SCO", "RD", "POS", "LS", "UI", "UC", "DI", "DC"), c("ASC", "OSC","SCO", "RD", "POS", "LS", "UI", "UC", "DI", "DC")]
write.csv(CFA.loading, "./OUTPUT/CFA/loading.csv")
matrix.CFA <- lavaan::lavInspect(CFA,"standardized")
CFA.loading <- as.data.frame(matrix.CFA$lambda) %>%
dplyr::select(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC) %>%
dplyr::mutate_at(vars(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC), round, 3)
CFA.loading[CFA.loading == 0] <- NA
CFA.correlation <- as.data.frame(matrix.CFA$psi) %>%
dplyr::mutate_at(vars(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC), round, 3) %>%
.[c("ASC", "OSC","SCO", "RD", "POS", "LS", "UI", "UC", "DI", "DC"), c("ASC", "OSC","SCO", "RD", "POS", "LS", "UI", "UC", "DI", "DC")]
write.csv(CFA.loading, "./OUTPUT/CFA/loading.csv")
write.csv(CFA.correlation, "./OUTPUT/CFA/latent_correlation.csv")
View(CFA.loading)
View(CFA.correlation)
matrix.CFA$psi
matrix.CFA <- lavaan::lavInspect(CFA,"standardized")
CFA.loading <- as.data.frame(matrix.CFA$lambda) %>%
dplyr::select(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC) %>%
dplyr::mutate_at(vars(ASC, OSC, SCO, RD, POS, LS, UI, UC, DI, DC), round, 3)
CFA.loading[CFA.loading == 0] <- NA
CFA.correlation <- as.data.frame(matrix.CFA$psi) %>%
dplyr::mutate_at(vars(SCO, RD, POS, LS, UI, UC, DI, DC), round, 3) %>%
.[c("SCO", "RD", "POS", "LS", "UI", "UC", "DI", "DC"), c("SCO", "RD", "POS", "LS", "UI", "UC", "DI", "DC")]
write.csv(CFA.loading, "./OUTPUT/CFA/loading.csv")
write.csv(CFA.correlation, "./OUTPUT/CFA/latent_correlation.csv")
View(CFA.correlation)
result <- capture.output({
bruceR::Describe(data = df.mean[,-1])
})
writeLines(result, "./OUTPUT//Table.1_Mean&SD.csv")
rm(result)
result <- capture.output({
bruceR::Describe(data = df.mean[,-1])
})
writeLines(result, "./OUTPUT//Table.1_Mean & SD.md")
rm(result)
View(matrix.CFA)
rm(ASC_items)
rm(matrix.CFA)
df.raw <-  read.csv('../../4_Data_Extraction/4_1_Simulated_Data/simulated_data.csv',
header = T, sep=",", stringsAsFactors = FALSE)
# 创建反向计分函数
reverse_score <- function(x) {
return(8 - x)
}
# 使用mutate函数进行反向计分
df.raw <- df.raw %>%
dplyr::mutate_at(vars(ASC5, OSC6, RD2, RD4), reverse_score)
write.csv(df.raw, file = '../../4_Data_Extraction/4_1_Simulated_Data/simulated_data.csv')
df.raw <-  read.csv('../../4_Data_Extraction/4_1_Simulated_Data/simulated_data.csv',
header = T, sep=",", stringsAsFactors = FALSE)
# 创建反向计分函数
reverse_score <- function(x) {
return(8 - x)
}
# 使用mutate函数进行反向计分
df.raw <- df.raw %>%
dplyr::mutate_at(vars(ASC5, OSC6, RD2, RD4), reverse_score)
#write.csv(df.raw, file = '../../4_Data_Extraction/4_1_Simulated_Data/simulated_data.csv')
View(df.raw)
result.CMB <- capture.output({
CMB <- 'HOFT =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5 +
OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6 +
RD1 + RD2 + RD3 + RD4 + RD5 +
POS1 + POS2 + POS3 + POS4 + POS5 +
LS1 + LS2 + LS3 + LS4 + LS5 +
UI1 + UI2 + UI3 +
UC1 + UC2 + UC3 +
DI1 + DI2 + DI3 +
DC1 + DC2 + DC3 +
SCD + USC + DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(CMB, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.CMB, "./OUTPUT/CMB/HOFT.md")
rm(result.CMB)
result.CMB <- capture.output({
CMB <- 'HOFT =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5 +
OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6 +
RD1 + RD2 + RD3 + RD4 + RD5 +
POS1 + POS2 + POS3 + POS4 + POS5 +
LS1 + LS2 + LS3 + LS4 + LS5 +
UI1 + UI2 + UI3 +
UC1 + UC2 + UC3 +
DI1 + DI2 + DI3 +
DC1 + DC2 + DC3 +
SCD + USC + DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(CMB, standardized=TRUE)
})
writeLines(result.CMB, "./OUTPUT/CMB/HOFT.md")
rm(result.CMB)
result.CMB <- capture.output({
CMB <- 'HOFT =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5 +
OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6 +
RD1 + RD2 + RD3 + RD4 + RD5 +
POS1 + POS2 + POS3 + POS4 + POS5 +
LS1 + LS2 + LS3 + LS4 + LS5 +
UI1 + UI2 + UI3 +
UC1 + UC2 + UC3 +
DI1 + DI2 + DI3 +
DC1 + DC2 + DC3 +
SCD + USC + DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(CMB, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.CMB, "./OUTPUT/CMB/HOFT.md")
rm(result.CMB)
rm(reverse_score)
View(CMB)
efa_result <- fa(df.raw, nfactors = 1, rotate = "varimax")
View(efa_result)
print(efa_result$Vaccounted[1], digits = 2)
efa_result$Vaccounted
result.CMB <- capture.output({
CMB <- 'HOFT =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5 +
OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6 +
RD1 + RD2 + RD3 + RD4 + RD5 +
POS1 + POS2 + POS3 + POS4 + POS5 +
LS1 + LS2 + LS3 + LS4 + LS5 +
UI1 + UI2 + UI3 +
UC1 + UC2 + UC3 +
DI1 + DI2 + DI3 +
DC1 + DC2 + DC3 +
SCD + USC + DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(CMB)
})
writeLines(result.CMB, "./OUTPUT/CMB/HOFT.md")
rm(result.CMB)
result.CMB <- capture.output({
CMB <- 'HOFT =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5 +
OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6 +
RD1 + RD2 + RD3 + RD4 + RD5 +
POS1 + POS2 + POS3 + POS4 + POS5 +
LS1 + LS2 + LS3 + LS4 + LS5 +
UI1 + UI2 + UI3 +
UC1 + UC2 + UC3 +
DI1 + DI2 + DI3 +
DC1 + DC2 + DC3 +
SCD + USC + DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(CMB, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.CMB, "./OUTPUT/CMB/HOFT.md")
rm(result.CMB)
View(CMB)
result.CFA.CMB <- capture.output({
CFA.CMB <- 'HOFT =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5 +
OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6 +
RD1 + RD2 + RD3 + RD4 + RD5 +
POS1 + POS2 + POS3 + POS4 + POS5 +
LS1 + LS2 + LS3 + LS4 + LS5 +
UI1 + UI2 + UI3 +
UC1 + UC2 + UC3 +
DI1 + DI2 + DI3 +
DC1 + DC2 + DC3 +
SCD + USC + DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(CFA.CMB, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.CFA.CMB, "./OUTPUT/CMB/HOFT.md")
rm(result.CFA.CMB)
EFA.CMB <- fa(mydata, nfactors = 1)
EFA.CMB <- fa(df.raw[,-1], nfactors = 1)
EFA.CMB$Vaccounted
View(df.raw)
df.raw <-  read.csv('../../4_Data_Extraction/4_1_Simulated_Data/simulated_data.csv',
header = T, sep=",", stringsAsFactors = FALSE)
View(df.mean)
View(df.raw)
# 创建反向计分函数
reverse_score <- function(x) {
return(8 - x)
}
# 使用mutate函数进行反向计分
df.raw <- df.raw %>%
dplyr::mutate_at(vars(ASC5, OSC6, RD2, RD4), reverse_score)
rm(reverse_score)
#write.csv(df.raw, file = '../../4_Data_Extraction/4_1_Simulated_Data/simulated_data.csv', row.names = FALSE)
EFA.CMB <- fa(df.raw[,-c(1:4)], nfactors = 1)
EFA.CMB$Vaccounted
result.HOFT.CFA <- capture.output({
HOFT.CFA <- 'HOFT =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5 +
OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6 +
RD1 + RD2 + RD3 + RD4 + RD5 +
POS1 + POS2 + POS3 + POS4 + POS5 +
LS1 + LS2 + LS3 + LS4 + LS5 +
UI1 + UI2 + UI3 +
UC1 + UC2 + UC3 +
DI1 + DI2 + DI3 +
DC1 + DC2 + DC3 +
SCD + USC + DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(HOFT.CFA, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.HOFT.CFA, "./OUTPUT/CMB/HOFT.CFA.md")
rm(result.HOFT.CFA)
rm(CFA.CMB)
rm(CMB)
rm(efa_result)
HOFT.EFA <- fa(df.raw[,-c(1:4)], nfactors = 1)
HOFT.EFA$Vaccounted
rm(EFA.CMB)
result.ULMC <- capture.output({
ULMC <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
UI =~ UI1 + UI2 + UI3
UC =~ UC1 + UC2 + UC3
DI =~ DI1 + DI2 + DI3
DC =~ DC1 + DC2 + DC3
ULMC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5 +
OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6 +
RD1 + RD2 + RD3 + RD4 + RD5 +
POS1 + POS2 + POS3 + POS4 + POS5 +
LS1 + LS2 + LS3 + LS4 + LS5 +
UI1 + UI2 + UI3 +
UC1 + UC2 + UC3 +
DI1 + DI2 + DI3 +
DC1 + DC2 + DC3 +
SCD + USC + DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(ULMC, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.ULMC, "./OUTPUT/CMB/ULMC.md")
rm(result.ULMC)
result.ULMC <- capture.output({
ULMC <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
UI =~ UI1 + UI2 + UI3
UC =~ UC1 + UC2 + UC3
DI =~ DI1 + DI2 + DI3
DC =~ DC1 + DC2 + DC3
ULMC =~ w*ASC1 + w*ASC2 + w*ASC3 + w*ASC4 + w*ASC5 +
w*OSC1 + w*OSC2 + w*OSC3 + w*OSC4 + w*OSC5 + w*OSC6 +
w*RD1 + w*RD2 + w*RD3 + w*RD4 + w*RD5 +
w*POS1 + w*POS2 + w*POS3 + w*POS4 + w*POS5 +
w*LS1 + w*LS2 + w*LS3 + w*LS4 + w*LS5 +
w*UI1 + w*UI2 + w*UI3 +
w*UC1 + w*UC2 + w*UC3 +
w*DI1 + w*DI2 + w*DI3 +
w*DC1 + w*DC2 + w*DC3 +
w*SCD + w*USC + w*DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(ULMC, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.ULMC, "./OUTPUT/CMB/ULMC.md")
rm(result.ULMC)
result.ULMC.e <- capture.output({
ULMC.e <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
UI =~ UI1 + UI2 + UI3
UC =~ UC1 + UC2 + UC3
DI =~ DI1 + DI2 + DI3
DC =~ DC1 + DC2 + DC3
ULMC =~ w*ASC1 + w*ASC2 + w*ASC3 + w*ASC4 + w*ASC5 +
w*OSC1 + w*OSC2 + w*OSC3 + w*OSC4 + w*OSC5 + w*OSC6 +
w*RD1 + w*RD2 + w*RD3 + w*RD4 + w*RD5 +
w*POS1 + w*POS2 + w*POS3 + w*POS4 + w*POS5 +
w*LS1 + w*LS2 + w*LS3 + w*LS4 + w*LS5 +
w*UI1 + w*UI2 + w*UI3 +
w*UC1 + w*UC2 + w*UC3 +
w*DI1 + w*DI2 + w*DI3 +
w*DC1 + w*DC2 + w*DC3 +
w*SCD + w*USC + w*DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(ULMC.e, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.ULMC.e, "./OUTPUT/CMB/ULMC.e.md")
rm(result.ULMC.e)
result.ULMC.ue <- capture.output({
ULMC.ue <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
UI =~ UI1 + UI2 + UI3
UC =~ UC1 + UC2 + UC3
DI =~ DI1 + DI2 + DI3
DC =~ DC1 + DC2 + DC3
ULMC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5 + OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6 +
RD1 + RD2 + RD3 + RD4 + RD5 +
POS1 + POS2 + POS3 + POS4 + POS5 +
LS1 + LS2 + LS3 + LS4 + LS5 +
UI1 + UI2 + UI3 +
UC1 + UC2 + UC3 +
DI1 + DI2 + DI3 +
DC1 + DC2 + DC3 +
SCD + USC + DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(ULMC.e, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.ULMC.e, "./OUTPUT/CMB/ULMC.e.md")
result.ULMC.e <- capture.output({
ULMC.e <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
UI =~ UI1 + UI2 + UI3
UC =~ UC1 + UC2 + UC3
DI =~ DI1 + DI2 + DI3
DC =~ DC1 + DC2 + DC3
ULMC =~ w*ASC1 + w*ASC2 + w*ASC3 + w*ASC4 + w*ASC5 + w*OSC1 + w*OSC2 + w*OSC3 + w*OSC4 + w*OSC5 + w*OSC6 +
w*RD1 + w*RD2 + w*RD3 + w*RD4 + w*RD5 +
w*POS1 + w*POS2 + w*POS3 + w*POS4 + w*POS5 +
w*LS1 + w*LS2 + w*LS3 + w*LS4 + w*LS5 +
w*UI1 + w*UI2 + w*UI3 +
w*UC1 + w*UC2 + w*UC3 +
w*DI1 + w*DI2 + w*DI3 +
w*DC1 + w*DC2 + w*DC3 +
w*SCD + w*USC + w*DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(ULMC.e, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.ULMC.e, "./OUTPUT/CMB/ULMC.e.md")
rm(result.ULMC.e)
result.ULMC.e <- capture.output({
ULMC.e <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
UI =~ UI1 + UI2 + UI3
UC =~ UC1 + UC2 + UC3
DI =~ DI1 + DI2 + DI3
DC =~ DC1 + DC2 + DC3
ULMC =~ w*ASC1 + w*ASC2 + w*ASC3 + w*ASC4 + w*ASC5 + w*OSC1 + w*OSC2 + w*OSC3 + w*OSC4 + w*OSC5 + w*OSC6 + w*RD1 + w*RD2 + w*RD3 + w*RD4 + w*RD5 +
w*POS1 + w*POS2 + w*POS3 + w*POS4 + w*POS5 +
w*LS1 + w*LS2 + w*LS3 + w*LS4 + w*LS5 +
w*UI1 + w*UI2 + w*UI3 +
w*UC1 + w*UC2 + w*UC3 +
w*DI1 + w*DI2 + w*DI3 +
w*DC1 + w*DC2 + w*DC3 +
w*SCD + w*USC + w*DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(ULMC.e, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.ULMC.e, "./OUTPUT/CMB/ULMC.e.md")
rm(result.ULMC.e)
result.ULMC.e <- capture.output({
ULMC.e <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
UI =~ UI1 + UI2 + UI3
UC =~ UC1 + UC2 + UC3
DI =~ DI1 + DI2 + DI3
DC =~ DC1 + DC2 + DC3
ULMC =~ w*ASC1 + w*ASC2 + w*ASC3 + w*ASC4 + w*ASC5 + w*OSC1 + w*OSC2 + w*OSC3 + w*OSC4 + w*OSC5 + w*OSC6 + w*RD1 + w*RD2 + w*RD3 + w*RD4 + w*RD5 +
w*POS1 + w*POS2 + w*POS3 + w*POS4 + w*POS5 +
w*LS1 + w*LS2 + w*LS3 + w*LS4 + w*LS5 +
w*UI1 + w*UI2 + w*UI3 +
w*UC1 + w*UC2 + w*UC3 +
w*DI1 + w*DI2 + w*DI3 +
w*DC1 + w*DC2 + w*DC3 +
w*SCD + w*USC + w*DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(ULMC.e, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.ULMC.e, "./OUTPUT/CMB/ULMC.e.md")
rm(result.ULMC.e)
result.ULMC.e <- capture.output({
ULMC.e <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
UI =~ UI1 + UI2 + UI3
UC =~ UC1 + UC2 + UC3
DI =~ DI1 + DI2 + DI3
DC =~ DC1 + DC2 + DC3
ULMC =~ w*ASC1 + w*ASC2 + w*ASC3 + w*ASC4 + w*ASC5 + w*OSC1 + w*OSC2 + w*OSC3 + w*OSC4 + w*OSC5 + w*OSC6 + w*RD1 + w*RD2 + w*RD3 + w*RD4 + w*RD5 + w*POS1 + w*POS2 + w*POS3 + w*POS4 + w*POS5 +
w*LS1 + w*LS2 + w*LS3 + w*LS4 + w*LS5 +
w*UI1 + w*UI2 + w*UI3 +
w*UC1 + w*UC2 + w*UC3 +
w*DI1 + w*DI2 + w*DI3 +
w*DC1 + w*DC2 + w*DC3 +
w*SCD + w*USC + w*DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(ULMC.e, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.ULMC.e, "./OUTPUT/CMB/ULMC.e.md")
rm(result.ULMC.e)
result.ULMC.ue <- capture.output({
ULMC.ue <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
UI =~ UI1 + UI2 + UI3
UC =~ UC1 + UC2 + UC3
DI =~ DI1 + DI2 + DI3
DC =~ DC1 + DC2 + DC3
ULMC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5 + OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6 +
RD1 + RD2 + RD3 + RD4 + RD5 +
POS1 + POS2 + POS3 + POS4 + POS5 +
LS1 + LS2 + LS3 + LS4 + LS5 +
UI1 + UI2 + UI3 +
UC1 + UC2 + UC3 +
DI1 + DI2 + DI3 +
DC1 + DC2 + DC3 +
SCD + USC + DSC' %>%
lavaan::cfa(.,data=df.raw, estimator="ML")
lavaan::summary(ULMC.ue, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.ULMC.ue, "./OUTPUT/CMB/ULMC.ue.md")
rm(result.ULMC.ue)
View(df.raw)
result.SEM <- capture.output({
SEM <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
SCO =~ ASC + OSC
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
RD =~ SCO
POS =~ SCO
LS =~ RD + POS + SCO' %>%
lavaan::sem(.,data=df.raw, estimator="ML")
lavaan::summary(SEM, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.SEM, "./OUTPUT/SEM/SEM.md")
rm(result.SEM)
result.SEM.SCD <- capture.output({
SEM.SCD <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
SCO =~ ASC + OSC
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
RD =~ SCO*SCD
POS =~ SCO*SCD
LS =~ RD + POS + SCO' %>%
lavaan::sem(.,data=df.raw, estimator="ML")
lavaan::summary(SEM.SCD, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.SEM.SCD, "./OUTPUT/SEM/SEM.SCD.md")
rm(result.SEM.SCD)
install.packages("MplusAutomation")
library(here)
library(bruceR)
#library(dplyr)
#library(tidyr)
#library(psych)
#library(ggplot2)
library(gridExtra)
library(lavaan)
library(lavaanPlot)
library(MplusAutomation)
rm(SEM.SCD)
result.SEM.med <- capture.output({
SEM.med <- 'ASC =~ ASC1 + ASC2 + ASC3 + ASC4 + ASC5
OSC =~ OSC1 + OSC2 + OSC3 + OSC4 + OSC5 + OSC6
SCO =~ ASC + OSC
RD =~ RD1 + RD2 + RD3 + RD4 + RD5
POS =~ POS1 + POS2 + POS3 + POS4 + POS5
LS =~ LS1 + LS2 + LS3 + LS4 + LS5
RD =~ SCO
POS =~ SCO
LS =~ RD + POS + SCO' %>%
lavaan::sem(.,data=df.raw, estimator="ML")
lavaan::summary(SEM.med, fit.measures=TRUE, standardized=TRUE)
})
writeLines(result.SEM.med, "./OUTPUT/SEM/SEM.med.md")
rm(result.SEM.med)
rm(SEM)
