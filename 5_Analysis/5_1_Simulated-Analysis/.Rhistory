Moderator is USC DSC;
",
ANALYSIS = "
TYPE =general RANDOM;
estimator=MLR;
ALGORITHM=INTEGRATION;
convergence=0.01;
",
MODEL = "
ASC by ASC1-ASC5;
OSC by OSC1-OSC6;
SCO by ASC@0.8 OSC@0.8;
USC@1;
DSC@1;
SCOU | SCO XWITH USC;
SCOD | SCO XWITH DSC;
RD by RD1-RD5;
POS by POS1-POS5;
LS by LS1-LS5;
RD on SCO(a1)
USC
SCOU(w1);
POS on SCO(a2)
DSC
SCOD(w2);
LS on SCO(c)
RD(b1)
POS(b2);
",
MODELCONSTRAINT = "
NEW(L_UDSC M_UDSC H_UDSC
IE_L_RD IE_M_RD IE_H_RD
IE_L_POS IE_M_POS IE_H_POS
DIF_LM_RD DIF_LH_RD DIF_MH_RD
DIF_LM_POS DIF_LH_POS DIF_MH_POS
);
L_UDSC = -1;
M_UDSC = 0;
H_UDSC = 1;
IE_L_RD = (a1+w1*L_UDSC)*b1;
IE_M_RD = (a1+w1*M_UDSC)*b1;
IE_H_RD = (a1+w1*H_UDSC)*b1;
IE_L_POS = (a2+w2*L_UDSC)*b2;
IE_M_POS = (a2+w2*M_UDSC)*b2;
IE_H_POS = (a2+w2*H_UDSC)*b2;
DIF_LM_RD = IE_L_RD - IE_M_RD;
DIF_LH_RD = IE_L_RD - IE_H_RD;
DIF_MH_RD = IE_M_RD - IE_H_RD;
DIF_LM_POS = IE_L_POS - IE_M_POS;
DIF_LH_POS = IE_L_POS - IE_H_POS;
DIF_MH_POS = IE_M_POS - IE_H_POS;
PLOT(P_L_RD P_M_RD P_H_RD
P_L_POS P_M_POS P_H_POS);
LOOP(XVAL,1,7,0.1);
P_L_RD = IE_L_RD*XVAL;
P_M_RD = IE_M_RD*XVAL;
P_H_RD = IE_H_RD*XVAL;
P_L_POS = IE_L_POS*XVAL;
P_M_POS = IE_M_POS*XVAL;
P_H_POS = IE_H_POS*XVAL;
",
PLOT = "
TYPE = plot2;
",
OUTPUT = "
cint;
STDYX",
rdata = df.raw)
mplusModeler(SEM.mod.USC_DSC, modelout = "./OUTPUT/Mplus/SEM.mod.USC_DSC.inp", run = 1L)
rm(SEM.mod.USC_DSC)
SEM.mod.SCD <- capture.output({mplusObject(
TITLE = "
Moderator is SCD;
",
ANALYSIS = "
TYPE =general RANDOM;
estimator=MLR;
ALGORITHM=INTEGRATION;
convergence=0.01;
",
MODEL = "
ASC by ASC1-ASC5;
OSC by OSC1-OSC6;
SCO by ASC@0.8 OSC@0.8;
SCD@1;
OD | SCO XWITH SCD;
RD by RD1-RD5;
POS by POS1-POS5;
LS by LS1-LS5;
RD on SCO(a1)
SCD
OD(w1);
POS on SCO(a2)
SCD
OD(w2);
LS on SCO(c)
RD(b1)
POS(b2);
",
MODELCONSTRAINT = "
NEW(L_SCD M_SCD H_SCD
IE_L_RD IE_M_RD IE_H_RD
IE_L_POS IE_M_POS IE_H_POS
DIF_LM_RD DIF_LH_RD DIF_MH_RD
DIF_LM_POS DIF_LH_POS DIF_MH_POS
);
L_SCD = -1;
M_SCD = 0;
H_SCD = 1;
IE_L_RD = (a1+w1*L_SCD)*b1;
IE_M_RD = (a1+w1*M_SCD)*b1;
IE_H_RD = (a1+w1*H_SCD)*b1;
IE_L_POS = (a2+w2*L_SCD)*b2;
IE_M_POS = (a2+w2*M_SCD)*b2;
IE_H_POS = (a2+w2*H_SCD)*b2;
DIF_LM_RD = IE_L_RD - IE_M_RD;
DIF_LH_RD = IE_L_RD - IE_H_RD;
DIF_MH_RD = IE_M_RD - IE_H_RD;
DIF_LM_POS = IE_L_POS - IE_M_POS;
DIF_LH_POS = IE_L_POS - IE_H_POS;
DIF_MH_POS = IE_M_POS - IE_H_POS;
PLOT(P_L_RD P_M_RD P_H_RD
P_L_POS P_M_POS P_H_POS);
LOOP(XVAL,1,7,0.1);
P_L_RD = IE_L_RD*XVAL;
P_M_RD = IE_M_RD*XVAL;
P_H_RD = IE_H_RD*XVAL;
P_L_POS = IE_L_POS*XVAL;
P_M_POS = IE_M_POS*XVAL;
P_H_POS = IE_H_POS*XVAL;
",
PLOT = "
TYPE = plot2;
",
OUTPUT = "
cint;
STDYX",
rdata = df.raw)
})
writeLines(SEM.mod.SCD, "./OUTPUT/SEM/SEM.mod.SCD")
mplusModeler(SEM.mod.SCD, modelout = "./OUTPUT/Mplus/SEM.mod.SCD.inp", run = 1L)
SEM.mod.SCD <- capture.output({mplusObject(
TITLE = "
Moderator is SCD;
",
ANALYSIS = "
TYPE =general RANDOM;
estimator=MLR;
ALGORITHM=INTEGRATION;
convergence=0.01;
",
MODEL = "
ASC by ASC1-ASC5;
OSC by OSC1-OSC6;
SCO by ASC@0.8 OSC@0.8;
SCD@1;
OD | SCO XWITH SCD;
RD by RD1-RD5;
POS by POS1-POS5;
LS by LS1-LS5;
RD on SCO(a1)
SCD
OD(w1);
POS on SCO(a2)
SCD
OD(w2);
LS on SCO(c)
RD(b1)
POS(b2);
",
MODELCONSTRAINT = "
NEW(L_SCD M_SCD H_SCD
IE_L_RD IE_M_RD IE_H_RD
IE_L_POS IE_M_POS IE_H_POS
DIF_LM_RD DIF_LH_RD DIF_MH_RD
DIF_LM_POS DIF_LH_POS DIF_MH_POS
);
L_SCD = -1;
M_SCD = 0;
H_SCD = 1;
IE_L_RD = (a1+w1*L_SCD)*b1;
IE_M_RD = (a1+w1*M_SCD)*b1;
IE_H_RD = (a1+w1*H_SCD)*b1;
IE_L_POS = (a2+w2*L_SCD)*b2;
IE_M_POS = (a2+w2*M_SCD)*b2;
IE_H_POS = (a2+w2*H_SCD)*b2;
DIF_LM_RD = IE_L_RD - IE_M_RD;
DIF_LH_RD = IE_L_RD - IE_H_RD;
DIF_MH_RD = IE_M_RD - IE_H_RD;
DIF_LM_POS = IE_L_POS - IE_M_POS;
DIF_LH_POS = IE_L_POS - IE_H_POS;
DIF_MH_POS = IE_M_POS - IE_H_POS;
PLOT(P_L_RD P_M_RD P_H_RD
P_L_POS P_M_POS P_H_POS);
LOOP(XVAL,1,7,0.1);
P_L_RD = IE_L_RD*XVAL;
P_M_RD = IE_M_RD*XVAL;
P_H_RD = IE_H_RD*XVAL;
P_L_POS = IE_L_POS*XVAL;
P_M_POS = IE_M_POS*XVAL;
P_H_POS = IE_H_POS*XVAL;
",
PLOT = "
TYPE = plot2;
",
OUTPUT = "
cint;
STDYX",
rdata = df.raw)
})
writeLines(SEM.mod.SCD, "./OUTPUT/SEM/SEM.mod.SCD.md")
mplusModeler(SEM.mod.SCD, modelout = "./OUTPUT/Mplus/SEM.mod.SCD.inp", run = 1L)
SEM.mod.SCD <- mplusObject(
TITLE = "
Moderator is SCD;
",
ANALYSIS = "
TYPE =general RANDOM;
estimator=MLR;
ALGORITHM=INTEGRATION;
convergence=0.01;
",
MODEL = "
ASC by ASC1-ASC5;
OSC by OSC1-OSC6;
SCO by ASC@0.8 OSC@0.8;
SCD@1;
OD | SCO XWITH SCD;
RD by RD1-RD5;
POS by POS1-POS5;
LS by LS1-LS5;
RD on SCO(a1)
SCD
OD(w1);
POS on SCO(a2)
SCD
OD(w2);
LS on SCO(c)
RD(b1)
POS(b2);
",
MODELCONSTRAINT = "
NEW(L_SCD M_SCD H_SCD
IE_L_RD IE_M_RD IE_H_RD
IE_L_POS IE_M_POS IE_H_POS
DIF_LM_RD DIF_LH_RD DIF_MH_RD
DIF_LM_POS DIF_LH_POS DIF_MH_POS
);
L_SCD = -1;
M_SCD = 0;
H_SCD = 1;
IE_L_RD = (a1+w1*L_SCD)*b1;
IE_M_RD = (a1+w1*M_SCD)*b1;
IE_H_RD = (a1+w1*H_SCD)*b1;
IE_L_POS = (a2+w2*L_SCD)*b2;
IE_M_POS = (a2+w2*M_SCD)*b2;
IE_H_POS = (a2+w2*H_SCD)*b2;
DIF_LM_RD = IE_L_RD - IE_M_RD;
DIF_LH_RD = IE_L_RD - IE_H_RD;
DIF_MH_RD = IE_M_RD - IE_H_RD;
DIF_LM_POS = IE_L_POS - IE_M_POS;
DIF_LH_POS = IE_L_POS - IE_H_POS;
DIF_MH_POS = IE_M_POS - IE_H_POS;
PLOT(P_L_RD P_M_RD P_H_RD
P_L_POS P_M_POS P_H_POS);
LOOP(XVAL,1,7,0.1);
P_L_RD = IE_L_RD*XVAL;
P_M_RD = IE_M_RD*XVAL;
P_H_RD = IE_H_RD*XVAL;
P_L_POS = IE_L_POS*XVAL;
P_M_POS = IE_M_POS*XVAL;
P_H_POS = IE_H_POS*XVAL;
",
PLOT = "
TYPE = plot2;
",
OUTPUT = "
cint;
STDYX",
rdata = df.raw)
mplusModeler(SEM.mod.SCD, modelout = "./OUTPUT/Mplus/SEM.mod.SCD.inp", run = 1L)
rm(SEM.mod.SCD)
HOFT.EFA <- fa(df.raw[,-c(1:4)], nfactors = 1)
library(here)
# clean data
library(bruceR)
#library(dplyr)
#library(tidyr)
#library(psych)
#library(ggplot2)
library(gridExtra)
# SEM mediation
library(lavaan)
library(lavaanPlot)
# SED moderation
library(MplusAutomation)
library(texreg)
HOFT.EFA <- fa(df.raw[,-c(1:4)], nfactors = 1)
library(psych)
HOFT.EFA <- psych::fa(df.raw[,-c(1:4)], nfactors = 1)
HOFT.EFA$Vaccounted
#Computation of minimum sample size for test of fit
rmsea0 <- 0.05 #null hypothesized RMSEA
rmseaa <- 0.08 #alternative hypothesized RMSEA 0.01为样本最大值，0.08为样本最小值
d <- 292 #degrees of freedom 需要填写
alpha <- 0.05 #alpha level
desired <- 0.8 #desired power
#请勿修改
#initialize values
pow <- 0.0
n <- 0
#begin loop for finding initial level of n
while (pow<desired) {
n <- n+100
ncp0 <- (n-1)*d*rmsea0^2
ncpa <- (n-1)*d*rmseaa^2
#compute power
if(rmsea0<rmseaa) {
cval <- qchisq(alpha,d,ncp=ncp0,lower.tail=F)
pow <- pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
else {
cval <- qchisq(1-alpha,d,ncp=ncp0,lower.tail=F)
pow <- 1-pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
}
#begin loop for interval halving
foo <- -1
newn <- n
interval <- 200
powdiff <- pow - desired
while (powdiff>.001) {
interval <- interval*.5
newn <- newn + foo*interval*.5
ncp0 <- (newn-1)*d*rmsea0^2
ncpa <- (newn-1)*d*rmseaa^2
#compute power
if(rmsea0<rmseaa) {
cval <- qchisq(alpha,d,ncp=ncp0,lower.tail=F)
pow <- pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
else {
cval <- qchisq(1-alpha,d,ncp=ncp0,lower.tail=F)
pow <- 1-pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
powdiff <- abs(pow-desired)
if (pow<desired) {
foo <- 1
}
if (pow>desired) {
foo <- -1
}
}
minn <- newn
print(minn)
rm(alpha, cval, d, desired, foo, interval, minn, n, ncp0, ncpa, newn, pow, powdiff, rmsea0, rmseaa)
#Computation of minimum sample size for test of fit
rmsea0 <- 0.01 #null hypothesized RMSEA
rmseaa <- 0.08 #alternative hypothesized RMSEA 0.01为样本最大值，0.08为样本最小值
d <- 292 #degrees of freedom 需要填写
alpha <- 0.05 #alpha level
desired <- 0.8 #desired power
#请勿修改
#initialize values
pow <- 0.0
n <- 0
#begin loop for finding initial level of n
while (pow<desired) {
n <- n+100
ncp0 <- (n-1)*d*rmsea0^2
ncpa <- (n-1)*d*rmseaa^2
#compute power
if(rmsea0<rmseaa) {
cval <- qchisq(alpha,d,ncp=ncp0,lower.tail=F)
pow <- pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
else {
cval <- qchisq(1-alpha,d,ncp=ncp0,lower.tail=F)
pow <- 1-pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
}
#begin loop for interval halving
foo <- -1
newn <- n
interval <- 200
powdiff <- pow - desired
while (powdiff>.001) {
interval <- interval*.5
newn <- newn + foo*interval*.5
ncp0 <- (newn-1)*d*rmsea0^2
ncpa <- (newn-1)*d*rmseaa^2
#compute power
if(rmsea0<rmseaa) {
cval <- qchisq(alpha,d,ncp=ncp0,lower.tail=F)
pow <- pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
else {
cval <- qchisq(1-alpha,d,ncp=ncp0,lower.tail=F)
pow <- 1-pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
powdiff <- abs(pow-desired)
if (pow<desired) {
foo <- 1
}
if (pow>desired) {
foo <- -1
}
}
minn <- newn
print(minn)
rm(alpha, cval, d, desired, foo, interval, minn, n, ncp0, ncpa, newn, pow, powdiff, rmsea0, rmseaa)
#Computation of minimum sample size for test of fit
rmsea0 <- 0.05 #null hypothesized RMSEA
rmseaa <- 0.01 #alternative hypothesized RMSEA 0.01为样本最大值，0.08为样本最小值
d <- 292 #degrees of freedom 需要填写
alpha <- 0.05 #alpha level
desired <- 0.8 #desired power
#请勿修改
#initialize values
pow <- 0.0
n <- 0
#begin loop for finding initial level of n
while (pow<desired) {
n <- n+100
ncp0 <- (n-1)*d*rmsea0^2
ncpa <- (n-1)*d*rmseaa^2
#compute power
if(rmsea0<rmseaa) {
cval <- qchisq(alpha,d,ncp=ncp0,lower.tail=F)
pow <- pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
else {
cval <- qchisq(1-alpha,d,ncp=ncp0,lower.tail=F)
pow <- 1-pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
}
#begin loop for interval halving
foo <- -1
newn <- n
interval <- 200
powdiff <- pow - desired
while (powdiff>.001) {
interval <- interval*.5
newn <- newn + foo*interval*.5
ncp0 <- (newn-1)*d*rmsea0^2
ncpa <- (newn-1)*d*rmseaa^2
#compute power
if(rmsea0<rmseaa) {
cval <- qchisq(alpha,d,ncp=ncp0,lower.tail=F)
pow <- pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
else {
cval <- qchisq(1-alpha,d,ncp=ncp0,lower.tail=F)
pow <- 1-pchisq(cval,d,ncp=ncpa,lower.tail=F)
}
powdiff <- abs(pow-desired)
if (pow<desired) {
foo <- 1
}
if (pow>desired) {
foo <- -1
}
}
minn <- newn
print(minn)
rm(alpha, cval, d, desired, foo, interval, minn, n, ncp0, ncpa, newn, pow, powdiff, rmsea0, rmseaa)
library(here)
# clean data
library(bruceR)
#library(dplyr)
#library(tidyr)
library(psych)
#library(ggplot2)
library(gridExtra)
# SEM mediation
library(lavaan)
library(lavaanPlot)
# SED moderation
library(MplusAutomation)
SEM.med <- mplusObject(
TITLE = "
Mediation;
",
ANALYSIS = "
TYPE =general;
bootstrap = 5000;
",
MODEL = "
ASC by ASC1-ASC5;
OSC by OSC1-OSC6;
SCO by ASC@0.8 OSC@0.8;
RD by RD1-RD5;
POS by POS1-POS5;
LS by LS1-LS5;
RD on SCO(a1);
POS on SCO(a2);
LS on SCO(c)
RD(b1)
POS(b2);
",
MODELCONSTRAINT = "
NEW(IE_RD
IE_POS);
IE_RD = a1*b1;
IE_POS = a2*b2;
",
OUTPUT = "
CINT(bcbootstrap);
STDYX",
rdata = df.raw)
mplusModeler(SEM.med, modelout = "./OUTPUT/SEM/Mplus/SEM.med.inp", run = 1L)
rm(SEM.med)
